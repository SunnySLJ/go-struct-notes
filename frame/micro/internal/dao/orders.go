// Code generated by gormer. DO NOT EDIT.
package dao

import (
	"context"
	"time"

	"github.com/pkg/errors"
	"gorm.io/gorm"

	"go-micro/internal/template/model"
)

type OrderRepo struct {
	db *gorm.DB
}

func NewOrderRepo(db *gorm.DB) *OrderRepo {
	return &OrderRepo{db: db}
}

var _ OrderModel = NewOrderRepo(nil)

type OrderModel interface {
	AddOrder(ctx context.Context, order *model.Order) (err error)
	QueryOrders(ctx context.Context, pageNumber, pageSize int, condition *model.OrderOptions) (orders []model.Order, err error)
	CountOrders(ctx context.Context, condition *model.OrderOptions) (count int64, err error)
	UpdateOrder(ctx context.Context, updated, condition *model.OrderOptions) (err error)
	DeleteOrder(ctx context.Context, condition *model.OrderOptions) (err error)

	OrderExtModel
}

func (repo *OrderRepo) AddOrder(ctx context.Context, order *model.Order) (err error) {

	if order.CreateTime.IsZero() {
		order.CreateTime = time.Now()
	}

	if order.UpdateTime.IsZero() {
		order.UpdateTime = time.Now()
	}
	repo.db.WithContext(ctx).
		Table(model.OrderTableName).
		Create(order)
	err = repo.db.Error
	return
}

func (repo *OrderRepo) QueryOrders(ctx context.Context, pageNumber, pageSize int, condition *model.OrderOptions) (orders []model.Order, err error) {
	db := repo.db
	if condition != nil {
		db = db.Where(condition.Order, condition.Fields)
	}

	db = db.Where("delete_status != ?", 1)

	db.WithContext(ctx).
		Table(model.OrderTableName).
		Limit(pageSize).
		Offset((pageNumber - 1) * pageSize).
		Find(&orders)
	err = repo.db.Error
	return
}

func (repo *OrderRepo) CountOrders(ctx context.Context, condition *model.OrderOptions) (count int64, err error) {
	db := repo.db
	if condition != nil {
		db = db.Where(condition.Order, condition.Fields)
	}

	db = db.Where("delete_status != ?", 1)

	db.WithContext(ctx).
		Table(model.OrderTableName).
		Count(&count)
	err = repo.db.Error
	return
}

func (repo *OrderRepo) UpdateOrder(ctx context.Context, updated, condition *model.OrderOptions) (err error) {
	if updated == nil || len(updated.Fields) == 0 {
		return errors.New("update must choose certain fields")
	} else if condition == nil {
		return errors.New("update must include where condition")
	}

	if updated.Order.UpdateTime.IsZero() {
		updated.Order.UpdateTime = time.Now()
		updated.Fields = append(updated.Fields, "update_time")
	}

	repo.db.WithContext(ctx).
		Table(model.OrderTableName).
		Where(condition.Order, condition.Fields).
		Select(updated.Fields).
		Updates(updated.Order)
	err = repo.db.Error
	return
}

func (repo *OrderRepo) DeleteOrder(ctx context.Context, condition *model.OrderOptions) (err error) {
	if condition == nil {
		return errors.New("delete must include where condition")
	}

	repo.db.WithContext(ctx).
		Table(model.OrderTableName).
		Where(condition.Order, condition.Fields).
		Select("delete_status", "update_time").
		Updates(&model.Order{
			DeleteStatus: 1,
			UpdateTime:   time.Now(),
		})
	err = repo.db.Error
	return
}
